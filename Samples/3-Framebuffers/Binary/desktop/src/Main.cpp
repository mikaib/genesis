// Generated by Haxe 4.3.3
#include <hxcpp.h>

#ifndef INCLUDED_4dbe585c96d08098
#define INCLUDED_4dbe585c96d08098
#include "genesis.h"
#endif
#ifndef INCLUDED_66c800784bc86d2f
#define INCLUDED_66c800784bc86d2f
#include "linc_glfw.h"
#endif
#ifndef INCLUDED_ea389c7812b8afb8
#define INCLUDED_ea389c7812b8afb8
#include "linc_stb_image.h"
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_genesis_GsMainloop
#include <genesis/GsMainloop.h>
#endif
#ifndef INCLUDED_genesis__GsManagedData_GsManagedDataHolder
#include <genesis/_GsManagedData/GsManagedDataHolder.h>
#endif
#ifndef INCLUDED_genesis__GsManagedData_GsManagedData_Impl_
#include <genesis/_GsManagedData/GsManagedData_Impl_.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e47a9afac0942eb9_24_new,"Main","new",0x6616a5cb,"Main.new","Main.hx",24,0x087e5c05)
static const int _hx_array_data_332f6459_1[] = {
	(int)0,(int)1,(int)2,(int)2,(int)3,(int)0,
};
static const float _hx_array_data_332f6459_2[] = {
	-0.5,-0.5,0.0,0.0,1.0,0.5,-0.5,0.0,1.0,1.0,0.5,0.5,0.0,1.0,0.0,-0.5,0.5,0.0,0.0,0.0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_82_initWindow,"Main","initWindow",0xee596d15,"Main.initWindow","Main.hx",82,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_111_destroyWindow,"Main","destroyWindow",0xf8fc15b5,"Main.destroyWindow","Main.hx",111,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_114_initGraphics,"Main","initGraphics",0xddf92530,"Main.initGraphics","Main.hx",114,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_181_destroyGraphics,"Main","destroyGraphics",0xd50f35d0,"Main.destroyGraphics","Main.hx",181,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_205_frame,"Main","frame",0x82b6be58,"Main.frame","Main.hx",205,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_235_loop,"Main","loop",0xec6f8e99,"Main.loop","Main.hx",235,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_248_init,"Main","init",0xea732345,"Main.init","Main.hx",248,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_255_destroy,"Main","destroy",0x88b793e5,"Main.destroy","Main.hx",255,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_261_main,"Main","main",0xed0e206e,"Main.main","Main.hx",261,0x087e5c05)

void Main_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_24_new)
HXLINE(  52)		this->fragmentShaderSource = HX_("\r\n        #version 460 core\r\n\r\n        uniform sampler2D uTexture;\r\n        in vec2 vTexCoord;\r\n        out vec4 fragColor;\r\n\r\n        void main() {\r\n            fragColor = texture(uTexture, vTexCoord);\r\n        }\r\n    ",ee,41,48,a7);
HXLINE(  39)		this->vertexShaderSource = HX_("\r\n        #version 460 core\r\n\r\n        layout(location = 0) in vec3 aPosition;\r\n        layout(location = 1) in vec2 aTexCoord;\r\n        out vec2 vTexCoord;\r\n\r\n        void main() {\r\n            gl_Position = vec4(aPosition, 1.0);\r\n            vTexCoord = aTexCoord;\r\n        }\r\n    ",79,0d,c0,a5);
HXLINE(  34)		this->indexData = ::Array_obj< int >::fromData( _hx_array_data_332f6459_1,6);
HXLINE(  26)		this->vertexData = ::Array_obj< float >::fromData( _hx_array_data_332f6459_2,20);
            	}

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x07825a7d;
}

void Main_obj::initWindow(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_82_initWindow)
HXLINE(  83)		{
HXLINE(  83)			void();
HXDLIN(  83)			glfwInit();
            		}
HXLINE(  91)		glfwWindowHint(139265,196610);
HXLINE(  92)		glfwWindowHint(139266,2);
HXLINE(  93)		glfwWindowHint(139267,0);
HXLINE(  95)		glfwWindowHint(139271,0);
HXLINE(  96)		glfwWindowHint(131075,0);
HXLINE(  98)		{
HXLINE(  98)			void();
HXDLIN(  98)			glfwInit();
            		}
HXLINE(  99)		glfwWindowHint(131075,0);
HXLINE( 101)		::cpp::Pointer<  GLFWmonitor > tmp = null();
HXDLIN( 101)		::cpp::Pointer<  GLFWwindow > tmp1 = null();
HXDLIN( 101)		this->window = glfwCreateWindow(600,600,HX_("Genesis [2 - Textured Quad]",03,53,05,04),tmp,tmp1);
HXLINE( 102)		if (::hx::IsNull( this->window )) {
HXLINE( 103)			glfwTerminate();
HXLINE( 104)			return;
            		}
HXLINE( 107)		::cpp::Pointer<  GLFWwindow > tmp2 = this->window;
HXDLIN( 107)		glfwMakeContextCurrent(tmp2);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,initWindow,(void))

void Main_obj::destroyWindow(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_111_destroyWindow)
HXDLIN( 111)		glfwTerminate();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,destroyWindow,(void))

void Main_obj::initGraphics(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_114_initGraphics)
HXLINE( 116)		this->backend = gs_create_backend(gs_get_optimal_backend_type());
HXLINE( 119)		this->config = gs_create_config();
HXLINE( 120)		(*(this->config)).backend = this->backend;
HXLINE( 123)		gs_init(this->config);
HXLINE( 126)		this->commandList = gs_create_command_list();
HXLINE( 129)		this->vertexShader = gs_create_shader(GS_SHADER_TYPE_VERTEX,this->vertexShaderSource.utf8_str());
HXLINE( 130)		this->fragmentShader = gs_create_shader(GS_SHADER_TYPE_FRAGMENT,this->fragmentShaderSource.utf8_str());
HXLINE( 133)		this->program = gs_create_program();
HXLINE( 134)		gs_program_attach_shader(this->program,this->vertexShader);
HXLINE( 135)		gs_program_attach_shader(this->program,this->fragmentShader);
HXLINE( 136)		gs_program_build(this->program);
HXLINE( 139)		this->layout = gs_create_layout();
HXLINE( 140)		{
HXLINE( 140)			 GsVtxLayout * _this = this->layout;
HXDLIN( 140)			gs_layout_add(_this,0,GS_ATTRIB_TYPE_FLOAT,3);
            		}
HXLINE( 141)		{
HXLINE( 141)			 GsVtxLayout * _this1 = this->layout;
HXDLIN( 141)			gs_layout_add(_this1,1,GS_ATTRIB_TYPE_FLOAT,2);
            		}
HXLINE( 142)		gs_layout_build(this->layout);
HXLINE( 145)		this->pipeline = gs_create_pipeline();
HXLINE( 146)		(*(this->pipeline)).layout = this->layout;
HXLINE( 147)		(*(this->pipeline)).program = this->program;
HXLINE( 148)		(*(this->pipeline)).msaa_samples = 4;
HXLINE( 151)		this->vertexBuffer = gs_create_buffer(GS_BUFFER_TYPE_VERTEX,GS_BUFFER_INTENT_DRAW_STATIC);
HXLINE( 152)		{
HXLINE( 152)			 GsBuffer * _this2 = this->vertexBuffer;
HXDLIN( 152)			::Array< float > data = this->vertexData;
HXDLIN( 152)			::cpp::Pointer< void > ptr = ( (::cpp::Pointer< float >)(::cpp::Pointer_obj::arrayElem(data,0)) )->reinterpret();
HXDLIN( 152)			 ::genesis::_GsManagedData::GsManagedDataHolder data1 = ::genesis::_GsManagedData::GsManagedData_Impl__obj::_new(ptr->ptr,(data->length * 4));
HXDLIN( 152)			gs_buffer_set_data(_this2,data1->ptr,data1->size);
            		}
HXLINE( 155)		this->indexBuffer = gs_create_buffer(GS_BUFFER_TYPE_INDEX,GS_BUFFER_INTENT_DRAW_STATIC);
HXLINE( 156)		{
HXLINE( 156)			 GsBuffer * _this3 = this->indexBuffer;
HXDLIN( 156)			::Array< int > data2 = this->indexData;
HXDLIN( 156)			::cpp::Pointer< void > ptr1 = ( (::cpp::Pointer< int >)(::cpp::Pointer_obj::arrayElem(data2,0)) )->reinterpret();
HXDLIN( 156)			 ::genesis::_GsManagedData::GsManagedDataHolder data3 = ::genesis::_GsManagedData::GsManagedData_Impl__obj::_new(ptr1->ptr,(data2->length * 4));
HXDLIN( 156)			gs_buffer_set_data(_this3,data3->ptr,data3->size);
            		}
HXLINE( 159)		this->textureUniform = gs_get_uniform_location(this->program,HX_("uTexture",e6,18,40,90).utf8_str());
HXLINE( 162)		::String imgPath = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(4)->init(0,::haxe::io::Path_obj::directory(::Sys_obj::programPath()))->init(1,HX_("..",40,28,00,00))->init(2,HX_("..",40,28,00,00))->init(3,HX_("image.png",16,96,18,16)));
HXLINE( 163)		 ::haxe::io::Bytes imgBytes = ::sys::io::File_obj::getBytes(imgPath);
HXLINE( 164)		 ::Dynamic imgData = linc::stb_image::load_from_memory(imgBytes->b,imgBytes->length,4);
HXLINE( 165)		this->texture = gs_create_texture(( (int)(imgData->__Field(HX_("w",77,00,00,00),::hx::paccDynamic)) ),( (int)(imgData->__Field(HX_("h",68,00,00,00),::hx::paccDynamic)) ),GS_TEXTURE_FORMAT_RGBA8,GS_TEXTURE_WRAP_CLAMP,GS_TEXTURE_WRAP_CLAMP,GS_TEXTURE_FILTER_LINEAR,GS_TEXTURE_FILTER_LINEAR);
HXLINE( 166)		{
HXLINE( 166)			 GsTexture * _this4 = this->texture;
HXDLIN( 166)			{
HXLINE( 166)				::cpp::Pointer< unsigned char > ptr2 = ( (::cpp::Pointer< unsigned char >)(::cpp::Pointer_obj::arrayElem(::haxe::io::Bytes_obj::ofData(( (::Array< unsigned char >)(imgData->__Field(HX_("bytes",6b,08,98,bd),::hx::paccDynamic)) ))->b,0)) );
HXDLIN( 166)				::cpp::Pointer< void > ptr3 = ptr2->reinterpret();
HXDLIN( 166)				gs_texture_set_data(_this4,ptr3->ptr);
            			}
            		}
HXLINE( 167)		gs_texture_generate_mipmaps(this->texture);
HXLINE( 170)		this->framebuffer1Color = gs_create_texture(600,600,GS_TEXTURE_FORMAT_RGBA8,GS_TEXTURE_WRAP_CLAMP,GS_TEXTURE_WRAP_CLAMP,GS_TEXTURE_FILTER_LINEAR,GS_TEXTURE_FILTER_LINEAR);
HXLINE( 171)		gs_texture_clear(this->framebuffer1Color);
HXLINE( 172)		this->framebuffer1 = gs_create_framebuffer(600,600);
HXLINE( 173)		gs_framebuffer_attach_texture(this->framebuffer1,this->framebuffer1Color,GS_FRAMEBUFFER_ATTACHMENT_COLOR);
HXLINE( 174)		this->framebuffer1Pass = gs_create_render_pass(this->framebuffer1);
HXLINE( 177)		this->copyTexture = gs_create_texture(600,600,GS_TEXTURE_FORMAT_RGBA8,GS_TEXTURE_WRAP_CLAMP,GS_TEXTURE_WRAP_CLAMP,GS_TEXTURE_FILTER_LINEAR,GS_TEXTURE_FILTER_LINEAR);
HXLINE( 178)		gs_texture_clear(this->copyTexture);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,initGraphics,(void))

void Main_obj::destroyGraphics(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_181_destroyGraphics)
HXLINE( 183)		gs_destroy_texture(this->copyTexture);
HXLINE( 184)		gs_destroy_framebuffer(this->framebuffer1);
HXLINE( 185)		gs_destroy_texture(this->framebuffer1Color);
HXLINE( 186)		gs_destroy_render_pass(this->framebuffer1Pass);
HXLINE( 187)		gs_destroy_texture(this->texture);
HXLINE( 188)		gs_destroy_command_list(this->commandList);
HXLINE( 189)		gs_destroy_pipeline(this->pipeline);
HXLINE( 190)		gs_destroy_layout(this->layout);
HXLINE( 191)		gs_destroy_buffer(this->vertexBuffer);
HXLINE( 192)		gs_destroy_buffer(this->indexBuffer);
HXLINE( 193)		gs_destroy_shader(this->vertexShader);
HXLINE( 194)		gs_destroy_shader(this->fragmentShader);
HXLINE( 195)		gs_destroy_program(this->program);
HXLINE( 198)		gs_shutdown();
HXLINE( 201)		gs_destroy_backend(this->backend);
HXLINE( 202)		gs_destroy_config(this->config);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,destroyGraphics,(void))

void Main_obj::frame(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_205_frame)
HXLINE( 207)		{
HXLINE( 207)			 GsCommandList * _this = this->commandList;
HXDLIN( 207)			gs_command_list_begin(_this);
            		}
HXLINE( 210)		{
HXLINE( 210)			 GsCommandList * _this1 = this->commandList;
HXDLIN( 210)			gs_set_viewport(_this1,0,0,600,600);
            		}
HXLINE( 211)		{
HXLINE( 211)			 GsCommandList * _this2 = this->commandList;
HXDLIN( 211)			gs_clear(_this2,(GsClearFlags)(1 | 2),( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(1) ));
            		}
HXLINE( 212)		{
HXLINE( 212)			 GsCommandList * _this3 = this->commandList;
HXDLIN( 212)			gs_use_buffer(_this3,this->vertexBuffer);
            		}
HXLINE( 213)		{
HXLINE( 213)			 GsCommandList * _this4 = this->commandList;
HXDLIN( 213)			gs_use_buffer(_this4,this->indexBuffer);
            		}
HXLINE( 214)		{
HXLINE( 214)			 GsCommandList * _this5 = this->commandList;
HXDLIN( 214)			gs_use_pipeline(_this5,this->pipeline);
            		}
HXLINE( 215)		{
HXLINE( 215)			 GsCommandList * _this6 = this->commandList;
HXDLIN( 215)			gs_uniform_set_int(_this6,this->textureUniform,0);
            		}
HXLINE( 218)		{
HXLINE( 218)			 GsCommandList * _this7 = this->commandList;
HXDLIN( 218)			gs_begin_render_pass(_this7,this->framebuffer1Pass);
            		}
HXLINE( 219)		{
HXLINE( 219)			 GsCommandList * _this8 = this->commandList;
HXDLIN( 219)			gs_set_viewport(_this8,0,0,(*(this->framebuffer1)).width,(*(this->framebuffer1)).height);
            		}
HXLINE( 220)		{
HXLINE( 220)			 GsCommandList * _this9 = this->commandList;
HXDLIN( 220)			gs_clear(_this9,(GsClearFlags)1,( (Float)(0) ),( (Float)(0) ),( (Float)(0) ),( (Float)(1) ));
            		}
HXLINE( 221)		{
HXLINE( 221)			 GsCommandList * _this10 = this->commandList;
HXDLIN( 221)			gs_use_texture(_this10,this->texture,0);
            		}
HXLINE( 222)		{
HXLINE( 222)			 GsCommandList * _this11 = this->commandList;
HXDLIN( 222)			gs_draw_indexed(_this11,6);
            		}
HXLINE( 223)		{
HXLINE( 223)			 GsCommandList * _this12 = this->commandList;
HXDLIN( 223)			gs_end_render_pass(_this12);
            		}
HXLINE( 226)		{
HXLINE( 226)			 GsCommandList * _this13 = this->commandList;
HXDLIN( 226)			gs_copy_texture(_this13,this->framebuffer1Color,this->copyTexture);
            		}
HXLINE( 227)		{
HXLINE( 227)			 GsCommandList * _this14 = this->commandList;
HXDLIN( 227)			gs_use_texture(_this14,this->copyTexture,0);
            		}
HXLINE( 228)		{
HXLINE( 228)			 GsCommandList * _this15 = this->commandList;
HXDLIN( 228)			gs_draw_indexed(_this15,6);
            		}
HXLINE( 231)		{
HXLINE( 231)			 GsCommandList * _this16 = this->commandList;
HXDLIN( 231)			gs_command_list_end(_this16);
            		}
HXLINE( 232)		{
HXLINE( 232)			 GsCommandList * _this17 = this->commandList;
HXDLIN( 232)			gs_command_list_submit(_this17);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,frame,(void))

void Main_obj::loop(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_235_loop)
HXLINE( 236)		::cpp::Pointer<  GLFWwindow > tmp = this->window;
HXDLIN( 236)		if ((glfwWindowShouldClose(tmp) == 1)) {
HXLINE( 237)			this->destroy();
HXLINE( 238)			return;
            		}
HXLINE( 241)		this->frame();
HXLINE( 243)		gs_frame();
HXLINE( 244)		::cpp::Pointer<  GLFWwindow > tmp1 = this->window;
HXDLIN( 244)		glfwSwapBuffers(tmp1);
HXLINE( 245)		glfwPollEvents();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,loop,(void))

void Main_obj::init(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_248_init)
HXLINE( 249)		this->initWindow();
HXLINE( 250)		this->initGraphics();
HXLINE( 252)		::genesis::GsMainloop_obj::start(this->loop_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,init,(void))

void Main_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_255_destroy)
HXLINE( 256)		gs_stop_mainloop();
HXLINE( 257)		this->destroyGraphics();
HXLINE( 258)		this->destroyWindow();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Main_obj,destroy,(void))

void Main_obj::main(){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_261_main)
HXLINE( 262)		 ::Main app =  ::Main_obj::__alloc( HX_CTX );
HXLINE( 263)		app->init();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))


::hx::ObjectPtr< Main_obj > Main_obj::__new() {
	::hx::ObjectPtr< Main_obj > __this = new Main_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Main_obj > Main_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Main_obj *__this = (Main_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Main_obj), true, "Main"));
	*(void **)__this = Main_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Main_obj::Main_obj()
{
}

void Main_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Main);
	HX_MARK_MEMBER_NAME(vertexData,"vertexData");
	HX_MARK_MEMBER_NAME(indexData,"indexData");
	HX_MARK_MEMBER_NAME(vertexShaderSource,"vertexShaderSource");
	HX_MARK_MEMBER_NAME(fragmentShaderSource,"fragmentShaderSource");
	HX_MARK_MEMBER_NAME(window,"window");
	HX_MARK_MEMBER_NAME(backend,"backend");
	HX_MARK_MEMBER_NAME(config,"config");
	HX_MARK_MEMBER_NAME(commandList,"commandList");
	HX_MARK_MEMBER_NAME(pipeline,"pipeline");
	HX_MARK_MEMBER_NAME(layout,"layout");
	HX_MARK_MEMBER_NAME(program,"program");
	HX_MARK_MEMBER_NAME(vertexShader,"vertexShader");
	HX_MARK_MEMBER_NAME(fragmentShader,"fragmentShader");
	HX_MARK_MEMBER_NAME(vertexBuffer,"vertexBuffer");
	HX_MARK_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(textureUniform,"textureUniform");
	HX_MARK_MEMBER_NAME(texture,"texture");
	HX_MARK_MEMBER_NAME(framebuffer1,"framebuffer1");
	HX_MARK_MEMBER_NAME(framebuffer1Color,"framebuffer1Color");
	HX_MARK_MEMBER_NAME(framebuffer1Pass,"framebuffer1Pass");
	HX_MARK_MEMBER_NAME(copyTexture,"copyTexture");
	HX_MARK_END_CLASS();
}

void Main_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(vertexData,"vertexData");
	HX_VISIT_MEMBER_NAME(indexData,"indexData");
	HX_VISIT_MEMBER_NAME(vertexShaderSource,"vertexShaderSource");
	HX_VISIT_MEMBER_NAME(fragmentShaderSource,"fragmentShaderSource");
	HX_VISIT_MEMBER_NAME(window,"window");
	HX_VISIT_MEMBER_NAME(backend,"backend");
	HX_VISIT_MEMBER_NAME(config,"config");
	HX_VISIT_MEMBER_NAME(commandList,"commandList");
	HX_VISIT_MEMBER_NAME(pipeline,"pipeline");
	HX_VISIT_MEMBER_NAME(layout,"layout");
	HX_VISIT_MEMBER_NAME(program,"program");
	HX_VISIT_MEMBER_NAME(vertexShader,"vertexShader");
	HX_VISIT_MEMBER_NAME(fragmentShader,"fragmentShader");
	HX_VISIT_MEMBER_NAME(vertexBuffer,"vertexBuffer");
	HX_VISIT_MEMBER_NAME(indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(textureUniform,"textureUniform");
	HX_VISIT_MEMBER_NAME(texture,"texture");
	HX_VISIT_MEMBER_NAME(framebuffer1,"framebuffer1");
	HX_VISIT_MEMBER_NAME(framebuffer1Color,"framebuffer1Color");
	HX_VISIT_MEMBER_NAME(framebuffer1Pass,"framebuffer1Pass");
	HX_VISIT_MEMBER_NAME(copyTexture,"copyTexture");
}

::hx::Val Main_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"loop") ) { return ::hx::Val( loop_dyn() ); }
		if (HX_FIELD_EQ(inName,"init") ) { return ::hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return ::hx::Val( frame_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { return ::hx::Val( window ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"destroy") ) { return ::hx::Val( destroy_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"indexData") ) { return ::hx::Val( indexData ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vertexData") ) { return ::hx::Val( vertexData ); }
		if (HX_FIELD_EQ(inName,"initWindow") ) { return ::hx::Val( initWindow_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"initGraphics") ) { return ::hx::Val( initGraphics_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"destroyWindow") ) { return ::hx::Val( destroyWindow_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"textureUniform") ) { return ::hx::Val( textureUniform ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"destroyGraphics") ) { return ::hx::Val( destroyGraphics_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"vertexShaderSource") ) { return ::hx::Val( vertexShaderSource ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fragmentShaderSource") ) { return ::hx::Val( fragmentShaderSource ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
	}
	return false;
}

::hx::Val Main_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"window") ) { window=inValue.Cast< ::cpp::Pointer<  GLFWwindow > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"indexData") ) { indexData=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"vertexData") ) { vertexData=inValue.Cast< ::Array< float > >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"textureUniform") ) { textureUniform=inValue.Cast< int >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"vertexShaderSource") ) { vertexShaderSource=inValue.Cast< ::String >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"fragmentShaderSource") ) { fragmentShaderSource=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Main_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("vertexData",ae,df,1f,d3));
	outFields->push(HX_("indexData",5c,0e,71,fe));
	outFields->push(HX_("vertexShaderSource",64,fb,81,44));
	outFields->push(HX_("fragmentShaderSource",d0,71,8a,f6));
	outFields->push(HX_("window",f0,93,8c,52));
	outFields->push(HX_("backend",14,bc,87,fb));
	outFields->push(HX_("config",c2,56,d2,c7));
	outFields->push(HX_("commandList",49,bb,13,e5));
	outFields->push(HX_("pipeline",22,bb,83,4b));
	outFields->push(HX_("layout",aa,ae,b8,58));
	outFields->push(HX_("program",84,4a,f9,f3));
	outFields->push(HX_("vertexShader",a9,b1,35,bd));
	outFields->push(HX_("fragmentShader",15,4f,dc,39));
	outFields->push(HX_("vertexBuffer",84,af,a9,70));
	outFields->push(HX_("indexBuffer",b2,65,a6,f5));
	outFields->push(HX_("textureUniform",99,41,25,d7));
	outFields->push(HX_("texture",db,c8,e0,9e));
	outFields->push(HX_("framebuffer1",a4,3a,ca,84));
	outFields->push(HX_("framebuffer1Color",1f,94,f4,01));
	outFields->push(HX_("framebuffer1Pass",95,6d,51,92));
	outFields->push(HX_("copyTexture",a6,45,f5,f4));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Main_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< float > */ ,(int)offsetof(Main_obj,vertexData),HX_("vertexData",ae,df,1f,d3)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(Main_obj,indexData),HX_("indexData",5c,0e,71,fe)},
	{::hx::fsString,(int)offsetof(Main_obj,vertexShaderSource),HX_("vertexShaderSource",64,fb,81,44)},
	{::hx::fsString,(int)offsetof(Main_obj,fragmentShaderSource),HX_("fragmentShaderSource",d0,71,8a,f6)},
	{::hx::fsUnknown /* ::cpp::Pointer<  GLFWwindow > */ ,(int)offsetof(Main_obj,window),HX_("window",f0,93,8c,52)},
	{::hx::fsUnknown /*  GsBackend * */ ,(int)offsetof(Main_obj,backend),HX_("backend",14,bc,87,fb)},
	{::hx::fsUnknown /*  GsConfig * */ ,(int)offsetof(Main_obj,config),HX_("config",c2,56,d2,c7)},
	{::hx::fsUnknown /*  GsCommandList * */ ,(int)offsetof(Main_obj,commandList),HX_("commandList",49,bb,13,e5)},
	{::hx::fsUnknown /*  GsPipeline * */ ,(int)offsetof(Main_obj,pipeline),HX_("pipeline",22,bb,83,4b)},
	{::hx::fsUnknown /*  GsVtxLayout * */ ,(int)offsetof(Main_obj,layout),HX_("layout",aa,ae,b8,58)},
	{::hx::fsUnknown /*  GsProgram * */ ,(int)offsetof(Main_obj,program),HX_("program",84,4a,f9,f3)},
	{::hx::fsUnknown /*  GsShader * */ ,(int)offsetof(Main_obj,vertexShader),HX_("vertexShader",a9,b1,35,bd)},
	{::hx::fsUnknown /*  GsShader * */ ,(int)offsetof(Main_obj,fragmentShader),HX_("fragmentShader",15,4f,dc,39)},
	{::hx::fsUnknown /*  GsBuffer * */ ,(int)offsetof(Main_obj,vertexBuffer),HX_("vertexBuffer",84,af,a9,70)},
	{::hx::fsUnknown /*  GsBuffer * */ ,(int)offsetof(Main_obj,indexBuffer),HX_("indexBuffer",b2,65,a6,f5)},
	{::hx::fsInt,(int)offsetof(Main_obj,textureUniform),HX_("textureUniform",99,41,25,d7)},
	{::hx::fsUnknown /*  GsTexture * */ ,(int)offsetof(Main_obj,texture),HX_("texture",db,c8,e0,9e)},
	{::hx::fsUnknown /*  GsFramebuffer * */ ,(int)offsetof(Main_obj,framebuffer1),HX_("framebuffer1",a4,3a,ca,84)},
	{::hx::fsUnknown /*  GsTexture * */ ,(int)offsetof(Main_obj,framebuffer1Color),HX_("framebuffer1Color",1f,94,f4,01)},
	{::hx::fsUnknown /*  GsRenderPass * */ ,(int)offsetof(Main_obj,framebuffer1Pass),HX_("framebuffer1Pass",95,6d,51,92)},
	{::hx::fsUnknown /*  GsTexture * */ ,(int)offsetof(Main_obj,copyTexture),HX_("copyTexture",a6,45,f5,f4)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Main_obj_sStaticStorageInfo = 0;
#endif

static ::String Main_obj_sMemberFields[] = {
	HX_("vertexData",ae,df,1f,d3),
	HX_("indexData",5c,0e,71,fe),
	HX_("vertexShaderSource",64,fb,81,44),
	HX_("fragmentShaderSource",d0,71,8a,f6),
	HX_("window",f0,93,8c,52),
	HX_("textureUniform",99,41,25,d7),
	HX_("initWindow",20,ef,d1,56),
	HX_("destroyWindow",8a,2c,86,20),
	HX_("initGraphics",fb,7f,1e,b7),
	HX_("destroyGraphics",e5,6b,6c,84),
	HX_("frame",2d,78,83,06),
	HX_("loop",64,a6,b7,47),
	HX_("init",10,3b,bb,45),
	HX_("destroy",fa,2c,86,24),
	::String(null()) };

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("main",39,38,56,48),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Main_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

